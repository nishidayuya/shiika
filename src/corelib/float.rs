// vim: set ft=rust:
// NOTE: .rs IS AUTO-GENERATED BY .erb
use crate::hir::*;
use crate::corelib::create_method;



pub fn create_methods() -> Vec<SkMethod> {
    vec![

        create_method("Float", "==(other: Float) -> Bool", |code_gen, function| {
        let val1 = function.get_params()[0].into_float_value();
        let val2 = function.get_params()[1].into_float_value();
        let result = code_gen.builder.build_float_compare(inkwell::FloatPredicate::OEQ, val1, val2, "eq");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Float", "!=(other: Float) -> Bool", |code_gen, function| {
        let val1 = function.get_params()[0].into_float_value();
        let val2 = function.get_params()[1].into_float_value();
        let result = code_gen.builder.build_float_compare(inkwell::FloatPredicate::UNE, val1, val2, "neq");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Float", "<(other: Float) -> Bool", |code_gen, function| {
        let val1 = function.get_params()[0].into_float_value();
        let val2 = function.get_params()[1].into_float_value();
        let result = code_gen.builder.build_float_compare(inkwell::FloatPredicate::OLT, val1, val2, "lt");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Float", ">(other: Float) -> Bool", |code_gen, function| {
        let val1 = function.get_params()[0].into_float_value();
        let val2 = function.get_params()[1].into_float_value();
        let result = code_gen.builder.build_float_compare(inkwell::FloatPredicate::OGT, val1, val2, "gt");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Float", "<=(other: Float) -> Bool", |code_gen, function| {
        let val1 = function.get_params()[0].into_float_value();
        let val2 = function.get_params()[1].into_float_value();
        let result = code_gen.builder.build_float_compare(inkwell::FloatPredicate::OLE, val1, val2, "leq");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Float", ">=(other: Float) -> Bool", |code_gen, function| {
        let val1 = function.get_params()[0].into_float_value();
        let val2 = function.get_params()[1].into_float_value();
        let result = code_gen.builder.build_float_compare(inkwell::FloatPredicate::OGE, val1, val2, "geq");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Float", "+(other: Float) -> Float", |code_gen, function| {
        let val1 = function.get_params()[0].into_float_value();
        let val2 = function.get_params()[1].into_float_value();
        let result = code_gen.builder.build_float_add(val1, val2, "add");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Float", "-(other: Float) -> Float", |code_gen, function| {
        let val1 = function.get_params()[0].into_float_value();
        let val2 = function.get_params()[1].into_float_value();
        let result = code_gen.builder.build_float_sub(val1, val2, "sub");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Float", "*(other: Float) -> Float", |code_gen, function| {
        let val1 = function.get_params()[0].into_float_value();
        let val2 = function.get_params()[1].into_float_value();
        let result = code_gen.builder.build_float_mul(val1, val2, "mul");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Float", "/(other: Float) -> Float", |code_gen, function| {
        let val1 = function.get_params()[0].into_float_value();
        let val2 = function.get_params()[1].into_float_value();
        let result = code_gen.builder.build_float_div(val1, val2, "div");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


    create_method("Float", "abs -> Float", |code_gen, function| {
        let x = function.get_params()[0].into_float_value();
        let func = code_gen.module.get_function("fabs").unwrap();
        let result = code_gen.builder.build_call(func, &[x.into()], "result").try_as_basic_value().left().unwrap();
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),

    create_method("Float", "floor -> Float", |code_gen, function| {
        let x = function.get_params()[0].into_float_value();
        let func = code_gen.module.get_function("floor").unwrap();
        let result = code_gen.builder.build_call(func, &[x.into()], "result").try_as_basic_value().left().unwrap();
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),

    create_method("Float", "to_i() -> Int", |code_gen, function| {
        let float = function.get_params()[0].into_float_value();
        let int = code_gen.builder.build_float_to_signed_int(float, code_gen.i32_type, "int");
        code_gen.builder.build_return(Some(&int));
        Ok(())
    }),

    create_method("Float", "-@ -> Float", |code_gen, function| {
        let this = function.get_params()[0].into_float_value();
        let zero = code_gen.f64_type.const_float(0.0);
        let result = code_gen.builder.build_float_sub(zero, this, "result");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),

    ]
}
