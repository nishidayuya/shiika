// vim: set ft=rust:
// NOTE: .rs IS AUTO-GENERATED BY .erb
use crate::hir::*;
use crate::corelib::create_method;



pub fn create_methods() -> Vec<SkMethod> {
    vec![

        create_method("Int", "==(other: Int) -> Bool", |code_gen, function| {
        let val1 = function.get_params()[0].into_int_value();
        let val2 = function.get_params()[1].into_int_value();
        let result = code_gen.builder.build_int_compare(inkwell::IntPredicate::EQ, val1, val2, "eq");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Int", "!=(other: Int) -> Bool", |code_gen, function| {
        let val1 = function.get_params()[0].into_int_value();
        let val2 = function.get_params()[1].into_int_value();
        let result = code_gen.builder.build_int_compare(inkwell::IntPredicate::NE, val1, val2, "neq");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Int", "<(other: Int) -> Bool", |code_gen, function| {
        let val1 = function.get_params()[0].into_int_value();
        let val2 = function.get_params()[1].into_int_value();
        let result = code_gen.builder.build_int_compare(inkwell::IntPredicate::SLT, val1, val2, "lt");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Int", ">(other: Int) -> Bool", |code_gen, function| {
        let val1 = function.get_params()[0].into_int_value();
        let val2 = function.get_params()[1].into_int_value();
        let result = code_gen.builder.build_int_compare(inkwell::IntPredicate::SGT, val1, val2, "gt");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Int", "<=(other: Int) -> Bool", |code_gen, function| {
        let val1 = function.get_params()[0].into_int_value();
        let val2 = function.get_params()[1].into_int_value();
        let result = code_gen.builder.build_int_compare(inkwell::IntPredicate::SLE, val1, val2, "leq");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Int", ">=(other: Int) -> Bool", |code_gen, function| {
        let val1 = function.get_params()[0].into_int_value();
        let val2 = function.get_params()[1].into_int_value();
        let result = code_gen.builder.build_int_compare(inkwell::IntPredicate::SGE, val1, val2, "geq");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Int", "+(other: Int) -> Int", |code_gen, function| {
        let val1 = function.get_params()[0].into_int_value();
        let val2 = function.get_params()[1].into_int_value();
        let result = code_gen.builder.build_int_add(val1, val2, "add");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Int", "-(other: Int) -> Int", |code_gen, function| {
        let val1 = function.get_params()[0].into_int_value();
        let val2 = function.get_params()[1].into_int_value();
        let result = code_gen.builder.build_int_sub(val1, val2, "sub");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Int", "*(other: Int) -> Int", |code_gen, function| {
        let val1 = function.get_params()[0].into_int_value();
        let val2 = function.get_params()[1].into_int_value();
        let result = code_gen.builder.build_int_mul(val1, val2, "mul");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Int", "/(other: Int) -> Int", |code_gen, function| {
        let val1 = function.get_params()[0].into_int_value();
        let val2 = function.get_params()[1].into_int_value();
        let result = code_gen.builder.build_int_signed_div(val1, val2, "div");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Int", "/(other: Int) -> Int", |code_gen, function| {
        let val1 = function.get_params()[0].into_int_value();
        let val2 = function.get_params()[1].into_int_value();
        let result = code_gen.builder.build_int_signed_div(val1, val2, "div");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Int", "reminder(other: Int) -> Int", |code_gen, function| {
        let val1 = function.get_params()[0].into_int_value();
        let val2 = function.get_params()[1].into_int_value();
        let result = code_gen.builder.build_int_signed_rem(val1, val2, "rem");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Int", "&(other: Int) -> Int", |code_gen, function| {
        let val1 = function.get_params()[0].into_int_value();
        let val2 = function.get_params()[1].into_int_value();
        let result = code_gen.builder.build_and(val1, val2, "and");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Int", "|(other: Int) -> Int", |code_gen, function| {
        let val1 = function.get_params()[0].into_int_value();
        let val2 = function.get_params()[1].into_int_value();
        let result = code_gen.builder.build_or(val1, val2, "or");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Int", "^(other: Int) -> Int", |code_gen, function| {
        let val1 = function.get_params()[0].into_int_value();
        let val2 = function.get_params()[1].into_int_value();
        let result = code_gen.builder.build_xor(val1, val2, "xor");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Int", "<<(other: Int) -> Int", |code_gen, function| {
        let val1 = function.get_params()[0].into_int_value();
        let val2 = function.get_params()[1].into_int_value();
        let result = code_gen.builder.build_left_shift(val1, val2, "lshift");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


        create_method("Int", ">>(other: Int) -> Int", |code_gen, function| {
        let val1 = function.get_params()[0].into_int_value();
        let val2 = function.get_params()[1].into_int_value();
        let result = code_gen.builder.build_right_shift(val1, val2, true, "rshift");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),


    create_method("Int", "to_f() -> Float", |code_gen, function| {
        let int = function.get_params()[0].into_int_value();
        let float = code_gen.builder.build_signed_int_to_float(int, code_gen.f64_type, "float");
        code_gen.builder.build_return(Some(&float));
        Ok(())
    }),

    create_method("Int", "-@ -> Int", |code_gen, function| {
        let this = function.get_params()[0].into_int_value();
        let zero = code_gen.i32_type.const_int(0, false);
        let result = code_gen.builder.build_int_sub(zero, this, "result");
        code_gen.builder.build_return(Some(&result));
        Ok(())
    }),

    ]
}

